#include <SPI.h>        // Para la conexión de dispositivos
#include <nRF24L01.h>   // Para dar uso soporte al módulo transceptor 
#include <RF24.h>       // Para la interacción con el módulo de radio NRF24L01

#include <WiFi.h>       // Para la comunicación Wifi
#include "secrets.h"    // Para las credenciales de la red Wifi
#include "ThingSpeak.h" // Para el envío de datos a ThingSpeak

// Definición de objetos y variables
RF24 myRF24(4, 5);       // Se declara el objeto y los pines para la comunicación SPI con el módulo NRF24L01
WiFiClient client;       // Cliente WiFi para comunicación
unsigned long lastConnectionTime = 0; // Tiempo de la última conexión a ThingSpeak
const unsigned long postingInterval = 15 * 1000; // Intervalo de tiempo entre envíos de datos (en milisegundos)

// Dirección de transmisión para el módulo NRF24L01
byte address[6] = "00001";

// Configuración de la red Wifi
const char *ssid = SECRET_SSID;
const char *password = SECRET_PASS;

// Prototipos de funciones
void updateThingSpeak(float pH, float CO2);

void setup() {
  Serial.begin(9600);
  delay(1000);

  // Inicialización del módulo NRF24L01
  myRF24.begin();
  myRF24.openReadingPipe(0, address);
  myRF24.setPALevel(RF24_PA_MIN);
  myRF24.startListening();

  // Conexión a la red Wifi
  WiFi.begin(ssid, password);
  ThingSpeak.begin(client);
}

void loop() {
  // Verifica la conexión a WiFi
  if (WiFi.status() == WL_CONNECTED) {
    // Verifica si hay datos disponibles en el módulo NRF24L01
    if (myRF24.available()) {
      float pH;
      myRF24.read(&pH, sizeof(pH));
      Serial.print("pH: ");
      Serial.println(pH, 2);

      float CO2;
      myRF24.read(&CO2, sizeof(CO2));
      Serial.print("CO2: ");
      Serial.println(CO2, 2);

      // Envío de datos a ThingSpeak si ha pasado el intervalo de tiempo necesario
      if (millis() - lastConnectionTime >= postingInterval) {
        updateThingSpeak(pH, CO2);
      }
    }
  } else {
    Serial.println("No se pudo conectar a la red Wi-Fi");
  }
}

void updateThingSpeak(float pH, float CO2) {
  // Establece los valores de pH y CO2 en los campos correspondientes de ThingSpeak
  ThingSpeak.setField(1, pH);
  ThingSpeak.setField(2, CO2);

  // Envía los datos a ThingSpeak y verifica el código de respuesta
  int httpCode = ThingSpeak.writeFields(SECRET_CH_ID, SECRET_WRITE_API_KEY);

  if (httpCode == 200) {
    Serial.println("Datos enviados a ThingSpeak con éxito");
  } else {
    Serial.println("Error al enviar datos a ThingSpeak");
  }

  // Actualiza el tiempo de la última conexión
  lastConnectionTime = millis();
}
